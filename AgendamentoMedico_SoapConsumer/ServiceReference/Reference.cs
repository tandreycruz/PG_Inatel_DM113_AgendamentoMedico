//------------------------------------------------------------------------------
// <auto-generated>
//     Esse código foi gerado por uma ferramenta.
//
//     As alterações no arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AgendamentoMedico", Namespace="http://schemas.datacontract.org/2004/07/AgendamentoMedico_SoapProducer.Model")]
    public partial class AgendamentoMedico : object
    {
        
        private string DataField;
        
        private string HoraField;
        
        private int IdField;
        
        private string LocalField;
        
        private string MedicoField;
        
        private string PacienteField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hora
        {
            get
            {
                return this.HoraField;
            }
            set
            {
                this.HoraField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Local
        {
            get
            {
                return this.LocalField;
            }
            set
            {
                this.LocalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Medico
        {
            get
            {
                return this.MedicoField;
            }
            set
            {
                this.MedicoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Paciente
        {
            get
            {
                return this.PacienteField;
            }
            set
            {
                this.PacienteField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAgendamentoMedicoService")]
    public interface IAgendamentoMedicoService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgendamentoMedicoService/GetAllAgendamentoMedico", ReplyAction="http://tempuri.org/IAgendamentoMedicoService/GetAllAgendamentoMedicoResponse")]
        System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico[]> GetAllAgendamentoMedicoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgendamentoMedicoService/GetAgendamentoMedico", ReplyAction="http://tempuri.org/IAgendamentoMedicoService/GetAgendamentoMedicoResponse")]
        System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico> GetAgendamentoMedicoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgendamentoMedicoService/InsertAgendamentoMedico", ReplyAction="http://tempuri.org/IAgendamentoMedicoService/InsertAgendamentoMedicoResponse")]
        System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico> InsertAgendamentoMedicoAsync(ServiceReference.AgendamentoMedico novoAgendamento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgendamentoMedicoService/UpdateAgendamentoMedico", ReplyAction="http://tempuri.org/IAgendamentoMedicoService/UpdateAgendamentoMedicoResponse")]
        System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico> UpdateAgendamentoMedicoAsync(ServiceReference.AgendamentoMedico agendamentoAtualizado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IAgendamentoMedicoServiceChannel : ServiceReference.IAgendamentoMedicoService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class AgendamentoMedicoServiceClient : System.ServiceModel.ClientBase<ServiceReference.IAgendamentoMedicoService>, ServiceReference.IAgendamentoMedicoService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar o ponto de extremidade de serviço.
        /// </summary>
        /// <param name="serviceEndpoint">O ponto de extremidade a ser configurado</param>
        /// <param name="clientCredentials">As credenciais do cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AgendamentoMedicoServiceClient() : 
                base(AgendamentoMedicoServiceClient.GetDefaultBinding(), AgendamentoMedicoServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAgendamentoMedicoService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AgendamentoMedicoServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AgendamentoMedicoServiceClient.GetBindingForEndpoint(endpointConfiguration), AgendamentoMedicoServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AgendamentoMedicoServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AgendamentoMedicoServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AgendamentoMedicoServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AgendamentoMedicoServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AgendamentoMedicoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico[]> GetAllAgendamentoMedicoAsync()
        {
            return base.Channel.GetAllAgendamentoMedicoAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico> GetAgendamentoMedicoAsync(int id)
        {
            return base.Channel.GetAgendamentoMedicoAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico> InsertAgendamentoMedicoAsync(ServiceReference.AgendamentoMedico novoAgendamento)
        {
            return base.Channel.InsertAgendamentoMedicoAsync(novoAgendamento);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.AgendamentoMedico> UpdateAgendamentoMedicoAsync(ServiceReference.AgendamentoMedico agendamentoAtualizado)
        {
            return base.Channel.UpdateAgendamentoMedicoAsync(agendamentoAtualizado);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAgendamentoMedicoService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Não foi possível encontrar o ponto de extremidade com o nome \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAgendamentoMedicoService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:5013/Service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Não foi possível encontrar o ponto de extremidade com o nome \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AgendamentoMedicoServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAgendamentoMedicoService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AgendamentoMedicoServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAgendamentoMedicoService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAgendamentoMedicoService,
        }
    }
}
